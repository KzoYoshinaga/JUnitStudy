package junitTest;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.*;

import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Date;

import org.junit.Test;

public class Test05Test {

	// p63 FIRST(よいテストとは)

	// e.g. 問題のあるテスト
	// ・読んだ人が理解出来ないテスト
	// ・成功することも失敗することもあるテスト
	// ・意味のある検証を行っていないテスト
	// ・実行に長い時間がかかるテスト
	// ・テスト対象のコードを十分に網羅していないテスト
	// ・テスト対象のコードが少し変更されただけでも、多数の失敗が発生してしまうような
	//   依存性の強いテスト
	// ・セットアップに多くの手間を必要とする複雑なテスト

	// 5.1 よいテストはFIRSTである *************************************************************************************

	// Fast: 迅速
	// Isolated: 隔離
	// Repeatable: 繰り返し可能
	// Self-validating: 自律的検証
	// Timely: タイムリー

	// FIRST: 最初に -> テスト駆動開発

	// 5.2 Fast: 迅速 **************************************************************************************************

	// 遅いコードへの依存を減らす
	// e.g.
	// public void doSomething(int id) {
	//     // 低速な永続化ストレージにアクセスするfind()メソッド
	//     String s = someController.find(id);
	//
	//     // テストが必要な処理
	// }
	//
	// 低速な処理に依存しているため網羅的なテストを行うには時間がかかる
	// 外部リソースアクセスを切り出しメモリ依存に修正する
	//
	// public void doSomething(int id, List list) {
	//     // メモリ上のマッピングのみに依存する用に修正
	//     String s = list.get(id);
	//
	//     // テストが必要な処理
	// }
	//

	// 5.3 Isolate: テストを隔離する ***********************************************************************************

	// コードの中の小さな一部分に着目して検証する
	// データへの依存のないテスト
	// 他のユニットテストや同一メソッド内のほかのシナリオにも依存しない
	// 時間や順序を問わずに実行できる

	// １つのクラスに対して変更が必要になる理由は１つだけであるべき

	// テストが失敗する理由が複数考えられるなら、そのテストの分割を検討

	// 5.4 Repeatable: 繰り返し可能 ************************************************************************************

	// 実行するたびに同じ結果を得られること
	// 自分が管理できない外部の環境からテストを完全に切り離す

	// 外部依存コードにはモックオブジェクトを使う

	// e.g. 時刻に依存するコード
	// Java8には常に一定の時刻を返すjava.time.Clockオブジェクトを生成できる
	@Test
	public void equalToNow() {
		Instant now = new Date().toInstant();

		// 検証対象にnowをセットする処理
		Clock c =Clock.fixed(now, ZoneId.of("Asia/Tokyo"));
		Instant target = c.instant();

		assertThat(target, equalTo(now));
	}

	// p5.5 Self-Validating: 自律的検証 *******************************************************************************

	// 検証作業はテスト自身で
	// セットアップ処理もテスト自体が行う
	// 外部依存のセットアップはIsolatedにも反する

	// tools
	// ・Infinitest: システムに対す変更が行われると影響するテストをバックグラウンドで実行する
	// ・Jenkins,TeamCity: CI(Continuous integration)ツール

	// 5.6 Timely(適切なタイミングでテストする) ************************************************************************

	// テスト対象は短いコードのほうが良い

	// 古いコードに対するテストは重要ではない
	// そのコードにバグがなく、近い将来に変更の可能性がないなら

	// まとめ **********************************************************************************************************

	// テストが増えるということは保守すべきコードが増えると言うこと
	// テストの質を高める

	// FIRST: 最初に
	// Fast
	// Isolated
	// Repeatable
	// Self-Validating
	// Timely

}
